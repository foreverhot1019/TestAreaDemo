<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Argument_Must_Be_GreaterThan" xml:space="preserve">
    <value>值必须大于 {0}。</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>列表</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>标题</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>测试多语言及区域</value>
  </data>
  <data name="Argument_Cannot_Be_Null_Or_Empty" xml:space="preserve">
    <value>值不能为 null 或空字符串。</value>
  </data>
  <data name="Argument_Must_Be_Between" xml:space="preserve">
    <value>值必须介于 {0} 和 {1} 之间。</value>
  </data>
  <data name="Argument_Must_Be_Enum_Member" xml:space="preserve">
    <value>值必须为来自“{0}”枚举的值。</value>
  </data>
  <data name="Argument_Must_Be_GreaterThanOrEqualTo" xml:space="preserve">
    <value>值必须大于或等于 {0}。</value>
  </data>
  <data name="Argument_Must_Be_LessThan" xml:space="preserve">
    <value>值必须小于 {0}。</value>
  </data>
  <data name="Argument_Must_Be_LessThanOrEqualTo" xml:space="preserve">
    <value>值必须小于或等于 {0}。</value>
  </data>
  <data name="Argument_Must_Be_Null_Or_Non_Empty" xml:space="preserve">
    <value>值不能为空字符串。它必须为 null 或为非空字符串。</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>未授权</value>
  </data>
  <data name="ValidationDefault_Regex" xml:space="preserve">
    <value>值无效。</value>
  </data>
  <data name="ValidationDefault_IntegerRange" xml:space="preserve">
    <value>{0} 值必须是介于 {1} 和 {2} 之间的整数。</value>
  </data>
  <data name="ValidationDefault_StringLength" xml:space="preserve">
    <value>最大长度: {0}。</value>
  </data>
  <data name="ValidationDefault_DataType" xml:space="preserve">
    <value>输入格式无效。</value>
  </data>
  <data name="ValidationDefault_StringLengthRange" xml:space="preserve">
    <value>字符串的长度必须是 {0} 到 {1} 个字符。</value>
  </data>
  <data name="ValidationDefault_FloatRange" xml:space="preserve">
    <value>值必须是介于 {0} 和 {1} 之间的小数。</value>
  </data>
  <data name="ValidationDefault_EqualsTo" xml:space="preserve">
    <value>值不匹配。</value>
  </data>
  <data name="EmailAddressAttribute_Invalid" xml:space="preserve">
    <value>字段{0}不是正确的邮箱格式</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>The type provided for EnumDataTypeAttribute cannot be null.</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeNeedsToBeAnEnum" xml:space="preserve">
    <value>类型“{0}”需要表示枚举类型。</value>
  </data>
  <data name="ArgumentIsNullOrWhitespace" xml:space="preserve">
    <value>The argument '{0}' cannot be null, empty or contain only white space.</value>
  </data>
  <data name="AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties" xml:space="preserve">
    <value>The associated metadata type for type '{0}' contains the following unknown properties or fields: {1}. Please make sure that the names of these members match the names of the properties on the main type.</value>
  </data>
  <data name="AttributeStore_Type_Must_Be_Public" xml:space="preserve">
    <value>The type '{0}' must be public.</value>
  </data>
  <data name="AttributeStore_Unknown_Method" xml:space="preserve">
    <value>The type '{0}' does not contain a public method named '{1}'.</value>
  </data>
  <data name="AttributeStore_Unknown_Property" xml:space="preserve">
    <value>The type '{0}' does not contain a public property named '{1}'.</value>
  </data>
  <data name="Common_NullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="Common_PropertyNotFound" xml:space="preserve">
    <value>The property {0}.{1} could not be found.</value>
  </data>
  <data name="CompareAttribute_MustMatch" xml:space="preserve">
    <value>“{0}”和“{1}”不匹配。</value>
  </data>
  <data name="CompareAttribute_UnknownProperty" xml:space="preserve">
    <value>找不到名为{0}的属性。</value>
  </data>
  <data name="CreditCardAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid credit card number.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Must_Return_ValidationResult" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Not_Found" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' does not exist in type '{1}' or is not public and static.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Required" xml:space="preserve">
    <value>The CustomValidationAttribute.Method was not specified.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Signature" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Conversion_Failed" xml:space="preserve">
    <value>Could not convert the value of type '{0}' to '{1}' as expected by method {2}.{3}.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Must_Be_Public" xml:space="preserve">
    <value>The custom validation type '{0}' must be public.</value>
  </data>
  <data name="CustomValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} 不被允许</value>
  </data>
  <data name="CustomValidationAttribute_ValidatorType_Required" xml:space="preserve">
    <value>The CustomValidationAttribute.ValidatorType was not specified.</value>
  </data>
  <data name="DataTypeAttribute_EmptyDataTypeString" xml:space="preserve">
    <value>The custom DataType string cannot be null or empty.</value>
  </data>
  <data name="DisplayAttribute_PropertyNotSet" xml:space="preserve">
    <value>The {0} property has not been set.  Use the {1} method to get the value.</value>
  </data>
  <data name="FileExtensionsAttribute_Invalid" xml:space="preserve">
    <value>The {0} field only accepts files with the following extensions: {1}</value>
  </data>
  <data name="LocalizableString_LocalizationFailed" xml:space="preserve">
    <value>Cannot retrieve property '{0}' because localization failed.  Type '{1}' is not public or does not contain a public static string property with the name '{2}'.</value>
  </data>
  <data name="MaxLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length.</value>
  </data>
  <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段必须是字符串或 最大长度为'{1}'的数组。</value>
  </data>
  <data name="MetadataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>MetadataClassType cannot be null.</value>
  </data>
  <data name="MinLengthAttribute_InvalidMinLength" xml:space="preserve">
    <value>MinLengthAttribute must have a Length value that is zero or greater.</value>
  </data>
  <data name="MinLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段必须是字符串或 最小长度为'{1}'的数组。</value>
  </data>
  <data name="PhoneAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid phone number.</value>
  </data>
  <data name="RangeAttribute_ArbitraryTypeNotIComparable" xml:space="preserve">
    <value>The type {0} must implement {1}.</value>
  </data>
  <data name="RangeAttribute_MinGreaterThanMax" xml:space="preserve">
    <value>The maximum value '{0}' must be greater than or equal to the minimum value '{1}'.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Min_And_Max" xml:space="preserve">
    <value>The minimum and maximum values must be set.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Operand_Type" xml:space="preserve">
    <value>The OperandType must be set when strings are used for minimum and maximum values.</value>
  </data>
  <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段值必须介于 {1} 和 {2} 之间</value>
  </data>
  <data name="RegexAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段值必须匹配正则表达式 '{1}'.</value>
  </data>
  <data name="RegularExpressionAttribute_Empty_Pattern" xml:space="preserve">
    <value>必须将模式设置为有效的正则表达式</value>
  </data>
  <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段是必须的。My</value>
  </data>
  <data name="StringLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>The maximum length must be a nonnegative integer.</value>
  </data>
  <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段必须是字符串且最大长度为'{1}'的数组。</value>
  </data>
  <data name="StringLengthAttribute_ValidationErrorIncludingMinimum" xml:space="preserve">
    <value>{0} 字段必须是字符串且 长度必须介于'{1}' 到 '{2}'之间。</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyIsNotAString" xml:space="preserve">
    <value>The key parameter at position {0} with value '{1}' is not a string. Every key control parameter must be a string.</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyIsNull" xml:space="preserve">
    <value>The key parameter at position {0} is null. Every key control parameter must be a string.</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyOccursMoreThanOnce" xml:space="preserve">
    <value>The key parameter at position {0} with value '{1}' occurs more than once.</value>
  </data>
  <data name="UIHintImplementation_NeedEvenNumberOfControlParameters" xml:space="preserve">
    <value>The number of control parameters must be even.</value>
  </data>
  <data name="UrlAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid fully-qualified http, https, or ftp URL.</value>
  </data>
  <data name="ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource" xml:space="preserve">
    <value>Either ErrorMessageString or ErrorMessageResourceName must be set, but not both.</value>
  </data>
  <data name="ValidationAttribute_IsValid_NotImplemented" xml:space="preserve">
    <value>IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context).</value>
  </data>
  <data name="ValidationAttribute_NeedBothResourceTypeAndResourceName" xml:space="preserve">
    <value>Both ErrorMessageResourceType and ErrorMessageResourceName need to be set on this attribute.</value>
  </data>
  <data name="ValidationAttribute_ResourcePropertyNotStringType" xml:space="preserve">
    <value>The property '{0}' on resource type '{1}' is not a string type.</value>
  </data>
  <data name="ValidationAttribute_ResourceTypeDoesNotHaveProperty" xml:space="preserve">
    <value>The resource type '{0}' does not have an accessible static property named '{1}'.</value>
  </data>
  <data name="ValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} 字段 不被允许</value>
  </data>
  <data name="ValidationContext_Must_Be_Method" xml:space="preserve">
    <value>The ValidationContext for the type '{0}', member name '{1}' must provide the MethodInfo.</value>
  </data>
  <data name="ValidationContextServiceContainer_ItemAlreadyExists" xml:space="preserve">
    <value>A service of type '{0}' already exists in the container.</value>
  </data>
  <data name="Validator_InstanceMustMatchValidationContextInstance" xml:space="preserve">
    <value>The instance provided must match the ObjectInstance on the ValidationContext supplied.</value>
  </data>
  <data name="Validator_Property_Value_Wrong_Type" xml:space="preserve">
    <value>The value for property '{0}' must be of type '{1}'.</value>
  </data>
  <data name="DataTypeAttribute_ValidationError" xml:space="preserve">
    <value>值“{1}”对字段{0}无效。</value>
  </data>
  <data name="RemoteAttribute_NoUrlFound" xml:space="preserve">
    <value>未能找到用于远程验证的 url。</value>
  </data>
  <data name="RemoteAttribute_RemoteValidationFailed" xml:space="preserve">
    <value>“{0}”无效。</value>
  </data>
</root>